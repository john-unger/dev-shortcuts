#!/bin/zsh
#
# macOS Update Script
#

function updatemac() {

  local LOGFILE="updatemac_log.txt"
  local TIMESTAMP_FORMAT="%Y-%m-%d %H:%M:%S"

  # Function to echo colored text and log output to a file
  function echo_color_log() {
    local color=$1
    local message=$2

    echo "[$(date +$TIMESTAMP_FORMAT)]: ${message}" >> "$LOGFILE"
    if [ -z "$color" ]; then
      echo "$message"
    else
      echo -e "\033[${color}m${message}\033[0m"
    fi
  }

  # Overwrite the log file if it exists
  echo "Updating log on: $(date +$TIMESTAMP_FORMAT)" > "$LOGFILE"

  # Check internet connectivity
  if ! ping -c 1 8.8.8.8 &>/dev/null; then
    echo_color_log "1;31" "Error: No internet connection. Aborting updates."
    return 1
  fi

  # Store whether an update is pending or not
  updates_pending=false

  # Check for macOS updates
  echo_color_log "1;34" "Checking for macOS updates..."
  if softwareupdate -l 2>&1 | grep -q "No new software available"; then
    echo_color_log "1;32" "macOS is up to date."
  else
    echo_color_log "1;33" "macOS update is available."
    updates_pending=true
  fi

  # Check for App Store updates
  echo_color_log "1;34" "Checking for App Store updates..."
  if mas outdated | grep -q "^[0-9]"; then
    echo_color_log "1;33" "App Store updates are available."
    updates_pending=true
  else
    echo_color_log "1;32" "App Store apps are up to date."
  fi

  # Check for Homebrew updates
  echo_color_log "1;34" "Checking for Homebrew updates..."
  homebrew_update_output=$(brew update --auto-update 2>&1)
  echo_color_log "" "$homebrew_update_output"
  if [[ "$homebrew_update_output" == *"Auto-updated Homebrew"* ]]; then
    echo_color_log "1;33" "Homebrew is updated."
  else
    echo_color_log "1;33" "Homebrew updates are available."
    updates_pending=true
  fi


  # Check for outdated casks and packages
  echo_color_log "1;34" "Checking for outdated casks and packages..."
  outdated_casks_and_packages_output=$(brew outdated --verbose 2>&1)
  if [[ -n "$outdated_casks_and_packages_output" ]]; then
    echo_color_log "1;33" "Outdated casks and packages found:"
    echo_color_log "" "$outdated_casks_and_packages_output"
    updates_pending=true
  else
    echo_color_log "1;32" "No outdated casks or packages found."
  fi

  # Ask for confirmation before proceeding with updates
  if [[ "$updates_pending" == true ]]; then
    echo_color_log "1;33" "Do you want to proceed with updates? (y/n): "
    read response

    # Convert the response to lowercase for case-insensitive comparison
    response=$(echo "$response" | tr '[:upper:]' '[:lower:]')

    if [[ "$response" != "y" && "$response" != "yes" ]]; then
      echo_color_log "1;31" "Updates aborted by user."
      return 1
    fi
  else
    echo_color_log "1;32" "No updates pending. Exiting."
    return 0
  fi

  # Perform macOS update in the background
  echo_color_log "1;34" "Updating macOS..."
  {
    if softwareupdate -ia > >(echo_color_log "1;32" "macOS update complete.") 2>&1; then
      echo_color_log "1;32" "macOS update complete."
    else
      echo_color_log "1;31" "macOS update failed."
    fi
  } &

  # Perform App Store update in the background
  echo_color_log "1;34" "Updating App Store apps..."
  {
    if mas upgrade > >(echo_color_log "1;32" "App Store update complete.") 2>&1; then
      echo_color_log "1;32" "App Store update complete."
    else
      echo_color_log "1;31" "App Store update failed."
    fi
  } &

  # Perform Homebrew update in the background
  echo_color_log "1;34" "Updating Homebrew..."
  {
    if brew update > >(echo_color_log "1;32" "Homebrew update complete.") 2>&1; then
      echo_color_log "1;32" "Homebrew update complete."
    else
      echo_color_log "1;31" "Homebrew update failed."
    fi
  } &

  # Upgrade outdated casks if any in the background
  if [[ -n $outdated_casks ]]; then
    echo_color_log "1;34" "Upgrading outdated casks and packages..."
    {
      if brew upgrade --cask --greedy > >(echo_color_log "1;32" "Cask and package upgrade complete.") 2>&1; then
        echo_color_log "1;32" "Cask and package upgrade complete."
      else
        echo_color_log "1;31" "Cask and package upgrade failed."
      fi
    } &
  fi

  # Wait for all background updates to finish
  wait

  # Perform Homebrew cleanup
  echo_color_log "1;34" "Cleaning up Homebrew..."
  if brew cleanup > >(echo_color_log "1;32" "Homebrew cleanup complete.") 2>&1; then
    echo_color_log "1;32" "Homebrew cleanup complete."
  else
    echo_color_log "1;31" "Homebrew cleanup failed."
  fi

  # Print the log file location and instructions
  echo_color_log "1;34" "To view the log, run the following command:"
  echo_color_log "1;34" "bat $(pwd)/updatemac_log.txt"
}
