#!/bin/zsh
#
# macOS Update Script
#

function updatemac() {
  # Function to echo colored text
  function echo_color() {
    local color=$1
    shift
    echo -e "\033[${color}m$@\033[0m"
  }

  # Function to log output to a file
  function log_output() {
    local logfile="updatemac_log.txt"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')]: $@" >> "$logfile"
  }

  # Overwrite the log file if it exists
  local logfile="updatemac_log.txt"
  echo "Updating log on: $(date '+%Y-%m-%d %H:%M:%S')" > "$logfile"

  # Check internet connectivity
  if ! ping -c 1 8.8.8.8 &>/dev/null; then
    echo_color "1;31" "Error: No internet connection. Aborting updates."
    log_output "Error: No internet connection. Aborting updates."
    return 1
  fi

  # Store whether an update is pending or not
  updates_pending=false

  # Check for macOS updates
  echo_color "1;34" "Checking for macOS updates..."
  if softwareupdate -l 2>&1 | grep -q "No new software available"; then
    echo_color "1;32" "macOS is up to date."
  else
    echo_color "1;33" "macOS update is available."
    updates_pending=true
  fi

  # Check for App Store updates
  echo_color "1;34" "Checking for App Store updates..."
  if mas outdated | grep -q "^[0-9]"; then
    echo_color "1;33" "App Store updates are available."
    updates_pending=true
  else
    echo_color "1;32" "App Store apps are up to date."
  fi

  # Check for Homebrew updates
  echo_color "1;34" "Checking for Homebrew updates..."
  if brew outdated | grep -q "^[0-9]"; then
    echo_color "1;33" "Homebrew updates are available."
    updates_pending=true
  else
    echo_color "1;32" "Homebrew packages are up to date."
  fi

  # Check for outdated casks
  echo_color "1;34" "Checking for outdated casks..."
  outdated_casks=$(brew outdated --cask --greedy --verbose)
  if [[ -n $outdated_casks ]]; then
    echo_color "1;33" "Outdated casks found:"
    echo "$outdated_casks"
    updates_pending=true
  else
    echo_color "1;32" "No outdated casks found."
  fi

  # Ask for confirmation before proceeding with updates
  if [[ "$updates_pending" == true ]]; then
    echo_color "1;33" "Do you want to proceed with updates? (y/n): "
    read response

    # Convert the response to lowercase for case-insensitive comparison
    response=$(echo "$response" | tr '[:upper:]' '[:lower:]')

    if [[ "$response" != "y" && "$response" != "yes" ]]; then
      echo_color "1;31" "Updates aborted by user."
      log_output "Updates aborted by user."
      return 1
    fi
  else
    echo_color "1;32" "No updates pending. Exiting."
    log_output "No updates pending. Exiting."
    return 0
  fi

  # Perform macOS update in the background
  echo_color "1;34" "Updating macOS..."
  { softwareupdate -ia > >(log_output "macOS update"); echo_color "1;32" "macOS update complete."; } &

  # Perform App Store update in the background
  echo_color "1;34" "Updating App Store apps..."
  { mas upgrade > >(log_output "App Store update"); echo_color "1;32" "App Store update complete."; } &

  # Perform Homebrew update in the background
  echo_color "1;34" "Updating Homebrew..."
  { brew update > >(log_output "Homebrew update"); echo_color "1;32" "Homebrew update complete."; } &

  # Upgrade outdated casks if any in the background
  if [[ -n $outdated_casks ]]; then
    echo_color "1;34" "Upgrading outdated casks and packages..."
    { brew upgrade --cask --greedy > >(log_output "Cask and package upgrade"); echo_color "1;32" "Cask and package upgrade complete."; } &
  fi

  # Wait for all background updates to finish
  wait

  # Perform Homebrew cleanup
  echo_color "1;34" "Cleaning up Homebrew..."
  brew cleanup > >(log_output "Homebrew cleanup")
  echo_color "1;32" "Homebrew cleanup complete."

  # Print the log file location
  echo_color "1;34" "To view the log: bat $(pwd)/updatemac_log.txt"
}
